// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datafile.proto

#ifndef PROTOBUF_datafile_2eproto__INCLUDED
#define PROTOBUF_datafile_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace reedb_proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_datafile_2eproto();
void protobuf_AssignDesc_datafile_2eproto();
void protobuf_ShutdownFile_datafile_2eproto();

class proto_file;
class proto_file_pair;
class proto_file_revision;

// ===================================================================

class proto_file_pair : public ::google::protobuf::Message {
 public:
  proto_file_pair();
  virtual ~proto_file_pair();

  proto_file_pair(const proto_file_pair& from);

  inline proto_file_pair& operator=(const proto_file_pair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const proto_file_pair& default_instance();

  void Swap(proto_file_pair* other);

  // implements Message ----------------------------------------------

  proto_file_pair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const proto_file_pair& from);
  void MergeFrom(const proto_file_pair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string val = 2;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline const ::std::string& val() const;
  inline void set_val(const ::std::string& value);
  inline void set_val(const char* value);
  inline void set_val(const char* value, size_t size);
  inline ::std::string* mutable_val();
  inline ::std::string* release_val();
  inline void set_allocated_val(::std::string* val);

  // @@protoc_insertion_point(class_scope:reedb_proto.proto_file.pair)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_val();
  inline void clear_has_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* val_;
  friend void  protobuf_AddDesc_datafile_2eproto();
  friend void protobuf_AssignDesc_datafile_2eproto();
  friend void protobuf_ShutdownFile_datafile_2eproto();

  void InitAsDefaultInstance();
  static proto_file_pair* default_instance_;
};
// -------------------------------------------------------------------

class proto_file_revision : public ::google::protobuf::Message {
 public:
  proto_file_revision();
  virtual ~proto_file_revision();

  proto_file_revision(const proto_file_revision& from);

  inline proto_file_revision& operator=(const proto_file_revision& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const proto_file_revision& default_instance();

  void Swap(proto_file_revision* other);

  // implements Message ----------------------------------------------

  proto_file_revision* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const proto_file_revision& from);
  void MergeFrom(const proto_file_revision& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 rev_no = 1;
  inline bool has_rev_no() const;
  inline void clear_rev_no();
  static const int kRevNoFieldNumber = 1;
  inline ::google::protobuf::int32 rev_no() const;
  inline void set_rev_no(::google::protobuf::int32 value);

  // repeated .reedb_proto.proto_file.pair entry = 2;
  inline int entry_size() const;
  inline void clear_entry();
  static const int kEntryFieldNumber = 2;
  inline const ::reedb_proto::proto_file_pair& entry(int index) const;
  inline ::reedb_proto::proto_file_pair* mutable_entry(int index);
  inline ::reedb_proto::proto_file_pair* add_entry();
  inline const ::google::protobuf::RepeatedPtrField< ::reedb_proto::proto_file_pair >&
      entry() const;
  inline ::google::protobuf::RepeatedPtrField< ::reedb_proto::proto_file_pair >*
      mutable_entry();

  // @@protoc_insertion_point(class_scope:reedb_proto.proto_file.revision)
 private:
  inline void set_has_rev_no();
  inline void clear_has_rev_no();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::reedb_proto::proto_file_pair > entry_;
  ::google::protobuf::int32 rev_no_;
  friend void  protobuf_AddDesc_datafile_2eproto();
  friend void protobuf_AssignDesc_datafile_2eproto();
  friend void protobuf_ShutdownFile_datafile_2eproto();

  void InitAsDefaultInstance();
  static proto_file_revision* default_instance_;
};
// -------------------------------------------------------------------

class proto_file : public ::google::protobuf::Message {
 public:
  proto_file();
  virtual ~proto_file();

  proto_file(const proto_file& from);

  inline proto_file& operator=(const proto_file& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const proto_file& default_instance();

  void Swap(proto_file* other);

  // implements Message ----------------------------------------------

  proto_file* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const proto_file& from);
  void MergeFrom(const proto_file& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef proto_file_pair pair;
  typedef proto_file_revision revision;

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string category = 2;
  inline bool has_category() const;
  inline void clear_category();
  static const int kCategoryFieldNumber = 2;
  inline const ::std::string& category() const;
  inline void set_category(const ::std::string& value);
  inline void set_category(const char* value);
  inline void set_category(const char* value, size_t size);
  inline ::std::string* mutable_category();
  inline ::std::string* release_category();
  inline void set_allocated_category(::std::string* category);

  // repeated string url = 3;
  inline int url_size() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 3;
  inline const ::std::string& url(int index) const;
  inline ::std::string* mutable_url(int index);
  inline void set_url(int index, const ::std::string& value);
  inline void set_url(int index, const char* value);
  inline void set_url(int index, const char* value, size_t size);
  inline ::std::string* add_url();
  inline void add_url(const ::std::string& value);
  inline void add_url(const char* value);
  inline void add_url(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& url() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_url();

  // repeated string tags = 4;
  inline int tags_size() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 4;
  inline const ::std::string& tags(int index) const;
  inline ::std::string* mutable_tags(int index);
  inline void set_tags(int index, const ::std::string& value);
  inline void set_tags(int index, const char* value);
  inline void set_tags(int index, const char* value, size_t size);
  inline ::std::string* add_tags();
  inline void add_tags(const ::std::string& value);
  inline void add_tags(const char* value);
  inline void add_tags(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // repeated .reedb_proto.proto_file.revision revs = 5;
  inline int revs_size() const;
  inline void clear_revs();
  static const int kRevsFieldNumber = 5;
  inline const ::reedb_proto::proto_file_revision& revs(int index) const;
  inline ::reedb_proto::proto_file_revision* mutable_revs(int index);
  inline ::reedb_proto::proto_file_revision* add_revs();
  inline const ::google::protobuf::RepeatedPtrField< ::reedb_proto::proto_file_revision >&
      revs() const;
  inline ::google::protobuf::RepeatedPtrField< ::reedb_proto::proto_file_revision >*
      mutable_revs();

  // @@protoc_insertion_point(class_scope:reedb_proto.proto_file)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_category();
  inline void clear_has_category();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* category_;
  ::google::protobuf::RepeatedPtrField< ::std::string> url_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::RepeatedPtrField< ::reedb_proto::proto_file_revision > revs_;
  friend void  protobuf_AddDesc_datafile_2eproto();
  friend void protobuf_AssignDesc_datafile_2eproto();
  friend void protobuf_ShutdownFile_datafile_2eproto();

  void InitAsDefaultInstance();
  static proto_file* default_instance_;
};
// ===================================================================


// ===================================================================

// proto_file_pair

// required string key = 1;
inline bool proto_file_pair::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proto_file_pair::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proto_file_pair::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void proto_file_pair::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& proto_file_pair::key() const {
  // @@protoc_insertion_point(field_get:reedb_proto.proto_file.pair.key)
  return *key_;
}
inline void proto_file_pair::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:reedb_proto.proto_file.pair.key)
}
inline void proto_file_pair::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:reedb_proto.proto_file.pair.key)
}
inline void proto_file_pair::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:reedb_proto.proto_file.pair.key)
}
inline ::std::string* proto_file_pair::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:reedb_proto.proto_file.pair.key)
  return key_;
}
inline ::std::string* proto_file_pair::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void proto_file_pair::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:reedb_proto.proto_file.pair.key)
}

// required string val = 2;
inline bool proto_file_pair::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void proto_file_pair::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void proto_file_pair::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void proto_file_pair::clear_val() {
  if (val_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    val_->clear();
  }
  clear_has_val();
}
inline const ::std::string& proto_file_pair::val() const {
  // @@protoc_insertion_point(field_get:reedb_proto.proto_file.pair.val)
  return *val_;
}
inline void proto_file_pair::set_val(const ::std::string& value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    val_ = new ::std::string;
  }
  val_->assign(value);
  // @@protoc_insertion_point(field_set:reedb_proto.proto_file.pair.val)
}
inline void proto_file_pair::set_val(const char* value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    val_ = new ::std::string;
  }
  val_->assign(value);
  // @@protoc_insertion_point(field_set_char:reedb_proto.proto_file.pair.val)
}
inline void proto_file_pair::set_val(const char* value, size_t size) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    val_ = new ::std::string;
  }
  val_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:reedb_proto.proto_file.pair.val)
}
inline ::std::string* proto_file_pair::mutable_val() {
  set_has_val();
  if (val_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    val_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:reedb_proto.proto_file.pair.val)
  return val_;
}
inline ::std::string* proto_file_pair::release_val() {
  clear_has_val();
  if (val_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = val_;
    val_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void proto_file_pair::set_allocated_val(::std::string* val) {
  if (val_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete val_;
  }
  if (val) {
    set_has_val();
    val_ = val;
  } else {
    clear_has_val();
    val_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:reedb_proto.proto_file.pair.val)
}

// -------------------------------------------------------------------

// proto_file_revision

// required int32 rev_no = 1;
inline bool proto_file_revision::has_rev_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proto_file_revision::set_has_rev_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proto_file_revision::clear_has_rev_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void proto_file_revision::clear_rev_no() {
  rev_no_ = 0;
  clear_has_rev_no();
}
inline ::google::protobuf::int32 proto_file_revision::rev_no() const {
  // @@protoc_insertion_point(field_get:reedb_proto.proto_file.revision.rev_no)
  return rev_no_;
}
inline void proto_file_revision::set_rev_no(::google::protobuf::int32 value) {
  set_has_rev_no();
  rev_no_ = value;
  // @@protoc_insertion_point(field_set:reedb_proto.proto_file.revision.rev_no)
}

// repeated .reedb_proto.proto_file.pair entry = 2;
inline int proto_file_revision::entry_size() const {
  return entry_.size();
}
inline void proto_file_revision::clear_entry() {
  entry_.Clear();
}
inline const ::reedb_proto::proto_file_pair& proto_file_revision::entry(int index) const {
  // @@protoc_insertion_point(field_get:reedb_proto.proto_file.revision.entry)
  return entry_.Get(index);
}
inline ::reedb_proto::proto_file_pair* proto_file_revision::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:reedb_proto.proto_file.revision.entry)
  return entry_.Mutable(index);
}
inline ::reedb_proto::proto_file_pair* proto_file_revision::add_entry() {
  // @@protoc_insertion_point(field_add:reedb_proto.proto_file.revision.entry)
  return entry_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::reedb_proto::proto_file_pair >&
proto_file_revision::entry() const {
  // @@protoc_insertion_point(field_list:reedb_proto.proto_file.revision.entry)
  return entry_;
}
inline ::google::protobuf::RepeatedPtrField< ::reedb_proto::proto_file_pair >*
proto_file_revision::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:reedb_proto.proto_file.revision.entry)
  return &entry_;
}

// -------------------------------------------------------------------

// proto_file

// required string name = 1;
inline bool proto_file::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proto_file::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proto_file::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void proto_file::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& proto_file::name() const {
  // @@protoc_insertion_point(field_get:reedb_proto.proto_file.name)
  return *name_;
}
inline void proto_file::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:reedb_proto.proto_file.name)
}
inline void proto_file::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:reedb_proto.proto_file.name)
}
inline void proto_file::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:reedb_proto.proto_file.name)
}
inline ::std::string* proto_file::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:reedb_proto.proto_file.name)
  return name_;
}
inline ::std::string* proto_file::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void proto_file::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:reedb_proto.proto_file.name)
}

// required string category = 2;
inline bool proto_file::has_category() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void proto_file::set_has_category() {
  _has_bits_[0] |= 0x00000002u;
}
inline void proto_file::clear_has_category() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void proto_file::clear_category() {
  if (category_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    category_->clear();
  }
  clear_has_category();
}
inline const ::std::string& proto_file::category() const {
  // @@protoc_insertion_point(field_get:reedb_proto.proto_file.category)
  return *category_;
}
inline void proto_file::set_category(const ::std::string& value) {
  set_has_category();
  if (category_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    category_ = new ::std::string;
  }
  category_->assign(value);
  // @@protoc_insertion_point(field_set:reedb_proto.proto_file.category)
}
inline void proto_file::set_category(const char* value) {
  set_has_category();
  if (category_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    category_ = new ::std::string;
  }
  category_->assign(value);
  // @@protoc_insertion_point(field_set_char:reedb_proto.proto_file.category)
}
inline void proto_file::set_category(const char* value, size_t size) {
  set_has_category();
  if (category_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    category_ = new ::std::string;
  }
  category_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:reedb_proto.proto_file.category)
}
inline ::std::string* proto_file::mutable_category() {
  set_has_category();
  if (category_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    category_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:reedb_proto.proto_file.category)
  return category_;
}
inline ::std::string* proto_file::release_category() {
  clear_has_category();
  if (category_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = category_;
    category_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void proto_file::set_allocated_category(::std::string* category) {
  if (category_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete category_;
  }
  if (category) {
    set_has_category();
    category_ = category;
  } else {
    clear_has_category();
    category_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:reedb_proto.proto_file.category)
}

// repeated string url = 3;
inline int proto_file::url_size() const {
  return url_.size();
}
inline void proto_file::clear_url() {
  url_.Clear();
}
inline const ::std::string& proto_file::url(int index) const {
  // @@protoc_insertion_point(field_get:reedb_proto.proto_file.url)
  return url_.Get(index);
}
inline ::std::string* proto_file::mutable_url(int index) {
  // @@protoc_insertion_point(field_mutable:reedb_proto.proto_file.url)
  return url_.Mutable(index);
}
inline void proto_file::set_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:reedb_proto.proto_file.url)
  url_.Mutable(index)->assign(value);
}
inline void proto_file::set_url(int index, const char* value) {
  url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:reedb_proto.proto_file.url)
}
inline void proto_file::set_url(int index, const char* value, size_t size) {
  url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:reedb_proto.proto_file.url)
}
inline ::std::string* proto_file::add_url() {
  return url_.Add();
}
inline void proto_file::add_url(const ::std::string& value) {
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:reedb_proto.proto_file.url)
}
inline void proto_file::add_url(const char* value) {
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:reedb_proto.proto_file.url)
}
inline void proto_file::add_url(const char* value, size_t size) {
  url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:reedb_proto.proto_file.url)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
proto_file::url() const {
  // @@protoc_insertion_point(field_list:reedb_proto.proto_file.url)
  return url_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
proto_file::mutable_url() {
  // @@protoc_insertion_point(field_mutable_list:reedb_proto.proto_file.url)
  return &url_;
}

// repeated string tags = 4;
inline int proto_file::tags_size() const {
  return tags_.size();
}
inline void proto_file::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& proto_file::tags(int index) const {
  // @@protoc_insertion_point(field_get:reedb_proto.proto_file.tags)
  return tags_.Get(index);
}
inline ::std::string* proto_file::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:reedb_proto.proto_file.tags)
  return tags_.Mutable(index);
}
inline void proto_file::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:reedb_proto.proto_file.tags)
  tags_.Mutable(index)->assign(value);
}
inline void proto_file::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:reedb_proto.proto_file.tags)
}
inline void proto_file::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:reedb_proto.proto_file.tags)
}
inline ::std::string* proto_file::add_tags() {
  return tags_.Add();
}
inline void proto_file::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:reedb_proto.proto_file.tags)
}
inline void proto_file::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:reedb_proto.proto_file.tags)
}
inline void proto_file::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:reedb_proto.proto_file.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
proto_file::tags() const {
  // @@protoc_insertion_point(field_list:reedb_proto.proto_file.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
proto_file::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:reedb_proto.proto_file.tags)
  return &tags_;
}

// repeated .reedb_proto.proto_file.revision revs = 5;
inline int proto_file::revs_size() const {
  return revs_.size();
}
inline void proto_file::clear_revs() {
  revs_.Clear();
}
inline const ::reedb_proto::proto_file_revision& proto_file::revs(int index) const {
  // @@protoc_insertion_point(field_get:reedb_proto.proto_file.revs)
  return revs_.Get(index);
}
inline ::reedb_proto::proto_file_revision* proto_file::mutable_revs(int index) {
  // @@protoc_insertion_point(field_mutable:reedb_proto.proto_file.revs)
  return revs_.Mutable(index);
}
inline ::reedb_proto::proto_file_revision* proto_file::add_revs() {
  // @@protoc_insertion_point(field_add:reedb_proto.proto_file.revs)
  return revs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::reedb_proto::proto_file_revision >&
proto_file::revs() const {
  // @@protoc_insertion_point(field_list:reedb_proto.proto_file.revs)
  return revs_;
}
inline ::google::protobuf::RepeatedPtrField< ::reedb_proto::proto_file_revision >*
proto_file::mutable_revs() {
  // @@protoc_insertion_point(field_mutable_list:reedb_proto.proto_file.revs)
  return &revs_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace reedb_proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_datafile_2eproto__INCLUDED
