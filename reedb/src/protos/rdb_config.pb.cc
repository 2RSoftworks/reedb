// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rdb_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rdb_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace reedb_proto {

namespace {

const ::google::protobuf::Descriptor* rdb_config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rdb_config_reflection_ = NULL;
const ::google::protobuf::Descriptor* rdb_config_vault_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rdb_config_vault_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rdb_5fconfig_2eproto() {
  protobuf_AddDesc_rdb_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rdb_config.proto");
  GOOGLE_CHECK(file != NULL);
  rdb_config_descriptor_ = file->message_type(0);
  static const int rdb_config_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rdb_config, machine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rdb_config, scoped_),
  };
  rdb_config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rdb_config_descriptor_,
      rdb_config::default_instance_,
      rdb_config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rdb_config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rdb_config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rdb_config));
  rdb_config_vault_descriptor_ = rdb_config_descriptor_->nested_type(0);
  static const int rdb_config_vault_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rdb_config_vault, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rdb_config_vault, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rdb_config_vault, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rdb_config_vault, size_),
  };
  rdb_config_vault_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rdb_config_vault_descriptor_,
      rdb_config_vault::default_instance_,
      rdb_config_vault_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rdb_config_vault, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rdb_config_vault, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rdb_config_vault));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rdb_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rdb_config_descriptor_, &rdb_config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rdb_config_vault_descriptor_, &rdb_config_vault::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rdb_5fconfig_2eproto() {
  delete rdb_config::default_instance_;
  delete rdb_config_reflection_;
  delete rdb_config_vault::default_instance_;
  delete rdb_config_vault_reflection_;
}

void protobuf_AddDesc_rdb_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020rdb_config.proto\022\013reedb_proto\"\215\001\n\nrdb_"
    "config\022\017\n\007machine\030\001 \002(\t\022-\n\006scoped\030\002 \003(\0132"
    "\035.reedb_proto.rdb_config.vault\032\?\n\005vault\022"
    "\014\n\004name\030\001 \002(\t\022\014\n\004path\030\002 \002(\t\022\014\n\004uuid\030\003 \002("
    "\t\022\014\n\004size\030\004 \002(\003", 175);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rdb_config.proto", &protobuf_RegisterTypes);
  rdb_config::default_instance_ = new rdb_config();
  rdb_config_vault::default_instance_ = new rdb_config_vault();
  rdb_config::default_instance_->InitAsDefaultInstance();
  rdb_config_vault::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rdb_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rdb_5fconfig_2eproto {
  StaticDescriptorInitializer_rdb_5fconfig_2eproto() {
    protobuf_AddDesc_rdb_5fconfig_2eproto();
  }
} static_descriptor_initializer_rdb_5fconfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int rdb_config_vault::kNameFieldNumber;
const int rdb_config_vault::kPathFieldNumber;
const int rdb_config_vault::kUuidFieldNumber;
const int rdb_config_vault::kSizeFieldNumber;
#endif  // !_MSC_VER

rdb_config_vault::rdb_config_vault()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:reedb_proto.rdb_config.vault)
}

void rdb_config_vault::InitAsDefaultInstance() {
}

rdb_config_vault::rdb_config_vault(const rdb_config_vault& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:reedb_proto.rdb_config.vault)
}

void rdb_config_vault::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rdb_config_vault::~rdb_config_vault() {
  // @@protoc_insertion_point(destructor:reedb_proto.rdb_config.vault)
  SharedDtor();
}

void rdb_config_vault::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void rdb_config_vault::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rdb_config_vault::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rdb_config_vault_descriptor_;
}

const rdb_config_vault& rdb_config_vault::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rdb_5fconfig_2eproto();
  return *default_instance_;
}

rdb_config_vault* rdb_config_vault::default_instance_ = NULL;

rdb_config_vault* rdb_config_vault::New() const {
  return new rdb_config_vault;
}

void rdb_config_vault::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uuid_->clear();
      }
    }
    size_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rdb_config_vault::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:reedb_proto.rdb_config.vault)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (tag == 18) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_uuid;
        break;
      }

      // required string uuid = 3;
      case 3: {
        if (tag == 26) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // required int64 size = 4;
      case 4: {
        if (tag == 32) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:reedb_proto.rdb_config.vault)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:reedb_proto.rdb_config.vault)
  return false;
#undef DO_
}

void rdb_config_vault::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:reedb_proto.rdb_config.vault)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // required string uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uuid(), output);
  }

  // required int64 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:reedb_proto.rdb_config.vault)
}

::google::protobuf::uint8* rdb_config_vault::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:reedb_proto.rdb_config.vault)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // required string uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uuid(), target);
  }

  // required int64 size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reedb_proto.rdb_config.vault)
  return target;
}

int rdb_config_vault::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required string uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // required int64 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rdb_config_vault::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rdb_config_vault* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rdb_config_vault*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rdb_config_vault::MergeFrom(const rdb_config_vault& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rdb_config_vault::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rdb_config_vault::CopyFrom(const rdb_config_vault& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rdb_config_vault::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void rdb_config_vault::Swap(rdb_config_vault* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(path_, other->path_);
    std::swap(uuid_, other->uuid_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rdb_config_vault::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rdb_config_vault_descriptor_;
  metadata.reflection = rdb_config_vault_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int rdb_config::kMachineFieldNumber;
const int rdb_config::kScopedFieldNumber;
#endif  // !_MSC_VER

rdb_config::rdb_config()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:reedb_proto.rdb_config)
}

void rdb_config::InitAsDefaultInstance() {
}

rdb_config::rdb_config(const rdb_config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:reedb_proto.rdb_config)
}

void rdb_config::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  machine_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rdb_config::~rdb_config() {
  // @@protoc_insertion_point(destructor:reedb_proto.rdb_config)
  SharedDtor();
}

void rdb_config::SharedDtor() {
  if (machine_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete machine_;
  }
  if (this != default_instance_) {
  }
}

void rdb_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rdb_config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rdb_config_descriptor_;
}

const rdb_config& rdb_config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rdb_5fconfig_2eproto();
  return *default_instance_;
}

rdb_config* rdb_config::default_instance_ = NULL;

rdb_config* rdb_config::New() const {
  return new rdb_config;
}

void rdb_config::Clear() {
  if (has_machine()) {
    if (machine_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      machine_->clear();
    }
  }
  scoped_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rdb_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:reedb_proto.rdb_config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string machine = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine().data(), this->machine().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "machine");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_scoped;
        break;
      }

      // repeated .reedb_proto.rdb_config.vault scoped = 2;
      case 2: {
        if (tag == 18) {
         parse_scoped:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scoped()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_scoped;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:reedb_proto.rdb_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:reedb_proto.rdb_config)
  return false;
#undef DO_
}

void rdb_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:reedb_proto.rdb_config)
  // required string machine = 1;
  if (has_machine()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine().data(), this->machine().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "machine");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->machine(), output);
  }

  // repeated .reedb_proto.rdb_config.vault scoped = 2;
  for (int i = 0; i < this->scoped_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scoped(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:reedb_proto.rdb_config)
}

::google::protobuf::uint8* rdb_config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:reedb_proto.rdb_config)
  // required string machine = 1;
  if (has_machine()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine().data(), this->machine().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "machine");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->machine(), target);
  }

  // repeated .reedb_proto.rdb_config.vault scoped = 2;
  for (int i = 0; i < this->scoped_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->scoped(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reedb_proto.rdb_config)
  return target;
}

int rdb_config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string machine = 1;
    if (has_machine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine());
    }

  }
  // repeated .reedb_proto.rdb_config.vault scoped = 2;
  total_size += 1 * this->scoped_size();
  for (int i = 0; i < this->scoped_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scoped(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rdb_config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rdb_config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rdb_config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rdb_config::MergeFrom(const rdb_config& from) {
  GOOGLE_CHECK_NE(&from, this);
  scoped_.MergeFrom(from.scoped_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_machine()) {
      set_machine(from.machine());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rdb_config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rdb_config::CopyFrom(const rdb_config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rdb_config::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->scoped())) return false;
  return true;
}

void rdb_config::Swap(rdb_config* other) {
  if (other != this) {
    std::swap(machine_, other->machine_);
    scoped_.Swap(&other->scoped_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rdb_config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rdb_config_descriptor_;
  metadata.reflection = rdb_config_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace reedb_proto

// @@protoc_insertion_point(global_scope)
