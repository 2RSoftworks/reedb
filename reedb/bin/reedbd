#!/usr/bin/env ruby

# ====================================================
# Copyright 2015 Lonely Robot (see @author)
# @author: Katharina Sabel | www.2rsoftworks.de
#
# Distributed under the GNU Lesser GPL Version 3
# (See accompanying LICENSE file or get a copy at
# 	https://www.gnu.org/licenses/lgpl.html)
# ====================================================

#  Checks the ruby version for ruby 2.1! This is the only supported version so far and if you run as something else
# then guess what: I ain't gonna care when it breaks, bitch! :)
# (Okay, that was unneccesarily ghetto. Sorry.)
#
rv = RUBY_VERSION
unless rv[0..-3] == '2.1'
	puts 'You are running Reedb with an unsupported Ruby version! Officially only 2.1.* is supported!'
	puts 'Do you want to take the risk and run Reedb anyways? [y/N] '
	a = gets.chomp.to_s.upcase
	if a == 'N' || a == ''
		exit(0x8)
	else
		puts "Don't complain..."
		sleep(0.25)
		puts ''
	end
end

# Only loads the constants section to read the version.
spec = nil
begin
	spec = Gem::Specification.find_by_name('reedb')
	require 'reedb/constants'
rescue Gem::LoadError => e
	begin
		require_relative '../lib/reedb/constants'
	rescue
		puts 'Error: reedb not installed!'
		exit(0x21)
	end
end

W_NAME = 'reedbd'
C_NAME = 'reedb'

# Very simple wrapper script to start the Reedb daemon.
if File.basename(__FILE__) == W_NAME
	if ARGV.include? '--version'
		puts Reedb::VERSION
		exit(0)
	end

	if ARGV == []
		puts '[ERROR]: Invalid application arguments!'
		puts "Usage: reedb (daemon options) [-- reedb options]

  Available [reedb options]:
     -l, --pw-length INTEGER     Define minimal passphrase length (Default: 12)
     -p, --port INTEGER          Change the listener port. May break your setup! (default: #{Reedb::NET_PORT})
     -a, --app-path STRING      Change the path for the reedb config files/ logs. (default: ~)
     -v, --verbose               Enable verbose logging about the Reedb daemon.
     -d, --no-daemon             Don't run Reedb as a background daemon. Log to STOUT instead of log file.
		 -f, --force               Force Reedb to start a new instance in case an old one was locked. (Dangerous!)

  Available [daemon options]:
     start                       Start an instance of the #{C_NAME} daemon
     stop                        Stop all instances of the #{C_NAME} daemon
     restart                     Stop all and restart a new instance of #{C_NAME} afterwards
     status                      Show status (PID) of #{C_NAME} daemon instance

  Common options:
         --version               Show #{C_NAME} version"

		# Then exits the application
		exit
	end

	options = {
		 :app_name => 'reedb',
		 :backtrace => true
	}

	if spec
		g_path = (spec.gem_dir) + '/lib/reedb'
		require 'reedb'

	# 	puts "Reedb isn't properly installed on your system!
 # Please make sure Gems can load it before trying to run this daemon again!
 # Exit code: #{0x9}"
 #
 # 		exit(0x9)
	else
		g_path = '../lib/reedb/'
		require_relative '../lib/reedb'
	end


	# NOW load the required modules to run.
	require 'daemons'

	# Then actually start the wrapper.
	Daemons.run(File.join(g_path, 'daemon_wrapper.rb'), options)
end